import telebot
import json
import uuid
import random
import schedule
import time
from admin import setup_admin_handlers
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from ru import WELCOME_TEXT

TOKEN = ''
bot = telebot.TeleBot(TOKEN)

RAND_MESSAGES = [
    "–ü—Ä–∏–≤–µ—Ç, {name}! –£—á–∞—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ? –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏! üòä",
    "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–∫–æ—Ä–æ –ø—Ä–æ–π–¥–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ! –ù–µ –∑–∞–±—É–¥—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, {name}! üöÄ",
    "–≠–π, {name}! –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ç–≤–æ–π —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç? –î–∞–π –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å! üßë‚Äçüè´"
]

def send_random_messages():
    for student in data_store['students']:
        telegram_id = student['telegram_id']
        first_name = student['first_name']
        random_message = random.choice(RAND_MESSAGES).format(name=first_name)
        bot.send_message(telegram_id, random_message)

# Schedule message sending every 20 seconds
schedule.every(20).seconds.do(send_random_messages)

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)  # Check every second for due jobs

# Start the schedule in the background
import threading
threading.Thread(target=run_schedule).start()

def load_data(filename='basa.json'):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            data = json.load(file)
            for key in ['students', 'activities', 'achievements', 'admins']:
                if key not in data:
                    data[key] = []
            return data
    except (FileNotFoundError, json.JSONDecodeError):
        return {'students': [], 'activities': [], 'achievements': [], 'admins': []}


def save_data(data):
    with open('basa.json', 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

data_store = load_data()

def is_user_registered(telegram_id):
    return any(student['telegram_id'] == telegram_id for student in data_store['students'])

def add_student(telegram_id, first_name, last_name, group_number):
    new_student = {
        'telegram_id': telegram_id,
        'first_name': first_name,
        'last_name': last_name,
        'group_number': group_number
    }
    data_store['students'].append(new_student)
    save_data(data_store)

setup_admin_handlers(bot)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_statistics"),
        InlineKeyboardButton("–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="upcoming_events")
    )
    bot.send_message(message.chat.id, WELCOME_TEXT, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "my_statistics")
def handle_my_statistics(call):
    bot.answer_callback_query(call.id)
    telegram_id = call.from_user.id

    if not is_user_registered(telegram_id):
        bot.send_message(call.message.chat.id, "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        start_registration(call.message)
    else:
        send_statistics_options(call.message)


def start_registration(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(msg, get_last_name)

def get_last_name(message):
    first_name = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(msg, get_group_number, first_name)

def get_group_number(message, first_name):
    last_name = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(msg, complete_registration, first_name, last_name)

def complete_registration(message, first_name, last_name):
    group_number = message.text.strip()
    telegram_id = message.from_user.id
    add_student(telegram_id, first_name, last_name, group_number)
    bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    send_welcome(message)

def send_statistics_options(message):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è", callback_data="show_achievements"),
        InlineKeyboardButton("–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="my_events"),
        InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ", callback_data="my_info"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ", callback_data="edit_info"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_options")
    )
    bot.send_message(message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –≤ —ç—Ç–æ—Ç —Ä–∞–∑?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "my_info")
def handle_my_info(call):
    bot.answer_callback_query(call.id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    telegram_id = call.from_user.id

    user = next((s for s in data_store['students'] if s['telegram_id'] == telegram_id), None)
    if user:
        user_info_text = (
            f"–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"–ò–º—è: {user['first_name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {user['last_name']}\n"
            f"–ì—Ä—É–ø–ø–∞: {user['group_number']}"
        )
    else:
        user_info_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_statistics"))
    bot.send_message(call.message.chat.id, user_info_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "edit_info")
def handle_edit_info(call):
    bot.answer_callback_query(call.id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    bot.register_next_step_handler(msg, edit_last_name)


def edit_last_name(message):
    first_name = message.text.strip()
    if not first_name:
        msg = bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, edit_last_name)
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(msg, edit_group_number, first_name)


def edit_group_number(message, first_name):
    last_name = message.text.strip()
    if not last_name:
        msg = bot.send_message(message.chat.id, "–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(msg, edit_group_number, first_name)
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(msg, update_user_info, first_name, last_name)


def update_user_info(message, first_name, last_name):
    group_number = message.text.strip()
    if not group_number:
        msg = bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
        bot.register_next_step_handler(msg, update_user_info, first_name, last_name)
        return

    telegram_id = message.from_user.id

    for student in data_store['students']:
        if student['telegram_id'] == telegram_id:
            student.update({
                'first_name': first_name,
                'last_name': last_name,
                'group_number': group_number
            })
            break

    save_data(data_store)
    bot.send_message(message.chat.id, "–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    send_statistics_options(message)


@bot.callback_query_handler(func=lambda call: call.data == "back_to_statistics")
def handle_back_to_statistics(call):
    bot.answer_callback_query(call.id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    send_statistics_options(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "show_achievements")
def show_achievements(call):
    bot.answer_callback_query(call.id)
    telegram_id = call.from_user.id

    student = next((s for s in data_store['students'] if s['telegram_id'] == telegram_id), None)
    if student:
        achievements = data_store['achievements']
        past_events = [
            a for a in data_store['activities'] if a['confirmed']
        ]
        
        if past_events:
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏:\n\n"
            markup = InlineKeyboardMarkup(row_width=1)
            for event in past_events:
                markup.add(InlineKeyboardButton(event['title'], callback_data=f"select_event_{event['id']}"))
            bot.send_message(call.message.chat.id, text, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.")

    else:
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("select_event_"))
def select_event(call):
    event_id = call.data.split("_")[-1]
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–Ω—è–ª–∏ (1-–µ, 2-–µ, 3-–µ –º–µ—Å—Ç–æ –∏ —Ç.–¥.):")
    bot.register_next_step_handler(msg, get_achievement_result, event_id)

def get_achievement_result(message, event_id):
    place = message.text.strip()
    if not place:
        msg = bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:")
        bot.register_next_step_handler(msg, get_achievement_result, event_id)
        return

    telegram_id = message.from_user.id
    achievement = {
        'student_id': telegram_id,
        'event_id': event_id,
        'place': place,
        'date': datetime.now().isoformat(),
        'confirmed': False
    }

    data_store.setdefault('achievements', []).append(achievement)
    save_data(data_store)
    
    bot.send_message(message.chat.id, "–í–∞—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
    send_statistics_options(message)

@bot.callback_query_handler(func=lambda call: call.data == "my_events")
def show_my_events(call):
    bot.answer_callback_query(call.id)
    telegram_id = call.from_user.id

    student = next((s for s in data_store['students'] if s['telegram_id'] == telegram_id), None)
    if student:
        student_id = student.get('telegram_id')

        events = [
            ach for ach in data_store['achievements']
            if ach['student_id'] == student_id
        ]

        if events:
            events_text = "–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
            for achievement in events:
                event = next((a for a in data_store['activities'] if a['id'] == achievement['event_id']), None)
                if event:
                    events_text += (
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
                        f"–î–∞—Ç–∞: {event['date']}\n\n"
                    )
                else:
                    events_text += "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
        else:
            events_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."

        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_statistics"))
        
        bot.send_message(call.message.chat.id, events_text, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_options")
def handle_back_to_options(call):
    bot.answer_callback_query(call.id)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    send_welcome(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "upcoming_events")
def handle_upcoming_events(call):
    bot.answer_callback_query(call.id)

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö", callback_data="get_events"),
        InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", callback_data="report_event"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_welcome")
    )
    
    bot.send_message(call.message.chat.id, "–¢–∞–∫, –∫—É–¥–∞ –¥–∞–ª—å—à–µ? –í—ã–±–∏—Ä–∞–π –Ω–∏–∂–µ üëá", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "get_events")
def get_events(call):
    data_store = load_data()
    
    activities = data_store.get('activities', [])
    current_date = datetime.now()

    upcoming_events = []
    for event in activities:
        event_date = datetime.strptime(event['date'], '%Y-%m-%d')

        if event.get('confirmed', False) and event_date >= current_date:
            upcoming_events.append(event)

    if not upcoming_events:
        events_text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç."
    else:
        events_text = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
        for event in upcoming_events:
            events_text += (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
                f"–î–∞—Ç–∞: {event['date']}\n"
                f"–ú–µ—Å—Ç–æ: {event['location']}\n\n"
            )

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_upcoming_events"))
    bot.send_message(call.message.chat.id, events_text.strip(), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "report_event")
def report_event(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(msg, get_activity_description_title)

def get_activity_description_title(message):
    activity_title = message.text.strip()
    if not activity_title:
        msg = bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(msg, get_activity_description_title)
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(msg, get_activity_description, activity_title)

def get_activity_description(message, activity_title):
    activity_description = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
    bot.register_next_step_handler(msg, get_activity_date, activity_title, activity_description)

def get_activity_date(message, activity_title, activity_description):
    activity_date = message.text.strip()
    try:
        datetime.strptime(activity_date, '%Y-%m-%d') 
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        bot.register_next_step_handler(msg, get_activity_date, activity_title, activity_description)
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(msg, get_activity_location, activity_title, activity_description, activity_date)

def get_activity_location(message, activity_title, activity_description, activity_date):
    activity_location = message.text.strip()
    if not activity_location:
        msg = bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:")
        bot.register_next_step_handler(msg, get_activity_location, activity_title, activity_description, activity_date)
        return

    new_activity = {
        'id': str(uuid.uuid4()),  
        'title': activity_title,
        'description': activity_description,
        'date': activity_date,
        'location': activity_location,
        'confirmed': False,
        'submitter_id': message.from_user.id
    }

    data_store.setdefault('activities', []).append(new_activity)
    save_data(data_store)

    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")


@bot.callback_query_handler(func=lambda call: call.data == "back_to_upcoming_events")
def back_to_upcoming_events(call):
    handle_upcoming_events(call)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_welcome")
def handle_back_to_welcome(call):
    send_welcome(call.message)

if __name__ == '__main__':
    bot.polling(none_stop=True)
