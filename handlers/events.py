# handlers/events.py

import uuid
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot_instance import bot
from data_manager import load_data, save_data
from handlers.statistics import send_statistics_options

@bot.callback_query_handler(func=lambda call: call.data == "show_achievements")
def show_achievements(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–ü–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è" –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
    """
    bot.answer_callback_query(call.id)
    telegram_id = call.from_user.id
    data = load_data()
    student = next((s for s in data.get('students', []) if s['telegram_id'] == telegram_id), None)
    if student:
        past_events = [a for a in data.get('activities', []) if a.get('confirmed', False)]
        if past_events:
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏:\n\n"
            markup = InlineKeyboardMarkup(row_width=1)
            for event in past_events:
                markup.add(InlineKeyboardButton(event['title'], callback_data=f"select_event_{event['id']}"))
            bot.send_message(call.message.chat.id, text, reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞.")
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_event_"))
def select_event(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
    """
    event_id = call.data.split("_")[-1]
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–Ω—è–ª–∏ (1-–µ, 2-–µ, 3-–µ –º–µ—Å—Ç–æ –∏ —Ç.–¥.):")
    bot.register_next_step_handler(msg, get_achievement_result, event_id)

def get_achievement_result(message, event_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ.
    """
    place = message.text.strip()
    if not place:
        msg = bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:")
        bot.register_next_step_handler(msg, get_achievement_result, event_id)
        return
    telegram_id = message.from_user.id
    achievement = {
        'student_id': telegram_id,
        'event_id': event_id,
        'place': place,
        'date': datetime.now().isoformat(),
        'confirmed': False
    }
    data = load_data()
    data.setdefault('achievements', []).append(achievement)
    save_data(data)
    bot.send_message(message.chat.id, "–í–∞—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
    send_statistics_options(message)


import io
from fpdf import FPDF
import os


# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
def generate_pdf(events):
    pdf = FPDF()
    pdf.add_page()

    # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
    font_path = os.path.join(os.path.dirname(__file__), 'fonts', 'DejaVuSans.ttf')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞
    if not os.path.exists(font_path):
        raise FileNotFoundError(f"–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {font_path}")

    # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (–Ω—É–∂–µ–Ω —Ñ–∞–π–ª DejaVuSans.ttf –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
    pdf.add_font('DejaVu', '', font_path, uni=True)
    pdf.set_font('DejaVu', '', 12)

    pdf.cell(200, 10, txt="–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", ln=1, align='C')

    for event in events:
        title = event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        description = event.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        date = event.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        level = event.get('event_level', '–ù–µ —É–∫–∞–∑–∞–Ω')
        category = event.get('event_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

        text = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        )
        pdf.multi_cell(0, 10, txt=text)

    return pdf.output(dest='S').encode('latin1')


@bot.callback_query_handler(func=lambda call: call.data == "my_events")
def show_my_events(call):
    bot.answer_callback_query(call.id)
    telegram_id = call.from_user.id
    data = load_data()

    student = next((s for s in data.get('students', []) if s['telegram_id'] == telegram_id), None)
    if not student:
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    achievements = [ach for ach in data.get('achievements', []) if ach['student_id'] == student['telegram_id']]
    events = []
    for ach in achievements:
        event = next((e for e in data.get('activities', []) if e['id'] == ach['event_id']), None)
        if event:
            events.append(event)

    if not events:
        events_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
    else:
        events_text = "–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
        for event in events:
            events_text += (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
                f"–î–∞—Ç–∞: {event['date']}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {event.get('event_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {event.get('event_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            )

    markup = InlineKeyboardMarkup(row_width=1)
    if events:
        markup.add(
            InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å PDF", callback_data="generate_pdf"),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_statistics")
        )
    else:
        markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_statistics"))

    bot.send_message(call.message.chat.id, events_text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
@bot.callback_query_handler(func=lambda call: call.data == "generate_pdf")
def handle_generate_pdf(call):
    bot.answer_callback_query(call.id)
    telegram_id = call.from_user.id
    data = load_data()

    student = next((s for s in data.get('students', []) if s['telegram_id'] == telegram_id), None)
    if not student:
        bot.send_message(call.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    achievements = [ach for ach in data.get('achievements', []) if ach['student_id'] == student['telegram_id']]
    events = []
    for ach in achievements:
        event = next((e for e in data.get('activities', []) if e['id'] == ach['event_id']), None)
        if event:
            events.append(event)

    if not events:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.")
        return

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_output = generate_pdf(events)
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
        pdf_file = io.BytesIO(pdf_output)
        pdf_file.seek(0)
        pdf_file.name = "my_events.pdf"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        bot.send_document(
            chat_id=call.message.chat.id,
            document=pdf_file,
            caption="–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "upcoming_events")
def handle_upcoming_events(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
    """
    bot.answer_callback_query(call.id)
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö", callback_data="get_events"),
        InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏", callback_data="report_event"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_welcome")
    )
    bot.send_message(call.message.chat.id, "–¢–∞–∫, –∫—É–¥–∞ –¥–∞–ª—å—à–µ? –í—ã–±–∏—Ä–∞–π –Ω–∏–∂–µ üëá", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "get_events")
def get_events(call):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
    """
    data = load_data()
    activities = data.get('activities', [])
    current_date = datetime.now()
    upcoming_events = []
    for event in activities:
        try:
            event_date = datetime.strptime(event['date'], '%Y-%m-%d')
            if event.get('confirmed', False) and event_date >= current_date:
                upcoming_events.append(event)
        except ValueError:
            continue
    if not upcoming_events:
        events_text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç."
    else:
        events_text = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
        for event in upcoming_events:
            events_text += (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
                f"–î–∞—Ç–∞: {event['date']}\n"
                f"–ú–µ—Å—Ç–æ: {event['location']}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {event.get('event_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {event.get('event_category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫: {event.get('survey_link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n\n"
            )
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_upcoming_events"))
    bot.send_message(call.message.chat.id, events_text.strip(), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "report_event")
def report_event(call):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.
    """
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(msg, get_activity_description_title)

def get_activity_description_title(message):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    activity_title = message.text.strip()
    if not activity_title:
        msg = bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(msg, get_activity_description_title)
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(msg, get_activity_description, activity_title)

def get_activity_description(message, activity_title):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    """
    activity_description = message.text.strip()
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
    bot.register_next_step_handler(msg, get_activity_date, activity_title, activity_description)

def get_activity_date(message, activity_title, activity_description):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç.
    """
    activity_date = message.text.strip()
    try:
        datetime.strptime(activity_date, '%Y-%m-%d')
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        bot.register_next_step_handler(msg, get_activity_date, activity_title, activity_description)
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(msg, get_activity_location, activity_title, activity_description, activity_date)

def get_activity_location(message, activity_title, activity_description, activity_date):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    """
    activity_location = message.text.strip()
    if not activity_location:
        msg = bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:")
        bot.register_next_step_handler(msg, get_activity_location, activity_title, activity_description, activity_date)
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(
        msg, get_event_level,
        activity_title, activity_description, activity_date, activity_location
    )

def get_event_level(message, activity_title, activity_description, activity_date, activity_location):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–π, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π, –≤—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π).
    """
    survey_link = message.text.strip()
    if not survey_link:
        msg = bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:")
        bot.register_next_step_handler(msg, get_event_level, activity_title, activity_description, activity_date, activity_location)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º survey_link, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–∫–∞–ª—å–Ω—ã–π, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π, –≤—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π):"
    )
    bot.register_next_step_handler(
        msg, get_event_category,
        activity_title, activity_description, activity_date, activity_location, survey_link
    )

def get_event_category(message, activity_title, activity_description, activity_date, activity_location, survey_link):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—É—á–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è, –æ–ª–∏–º–ø–∏–∞–¥–∞, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ, –∏ —Ç. –¥.).
    """
    event_level = message.text.strip()
    if not event_level:
        msg = bot.send_message(message.chat.id, "–£—Ä–æ–≤–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:")
        bot.register_next_step_handler(
            msg, get_event_category,
            activity_title, activity_description, activity_date, activity_location, survey_link
        )
        return

    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—É—á–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è, –æ–ª–∏–º–ø–∏–∞–¥–∞, —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –∏ —Ç. –¥.):"
    )
    bot.register_next_step_handler(
        msg, save_activity_with_survey,
        activity_title, activity_description, activity_date, activity_location, survey_link, event_level
    )

def save_activity_with_survey(message, activity_title, activity_description, activity_date, activity_location, survey_link, event_level):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫—É, —É—Ä–æ–≤–µ–Ω—å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    """
    event_category = message.text.strip()
    if not event_category:
        msg = bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
        bot.register_next_step_handler(
            msg, save_activity_with_survey,
            activity_title, activity_description, activity_date, activity_location, survey_link, event_level
        )
        return

    new_activity = {
        'id': str(uuid.uuid4()),
        'title': activity_title,
        'description': activity_description,
        'date': activity_date,
        'location': activity_location,
        'survey_link': survey_link,
        'event_level': event_level,
        'event_category': event_category,
        'confirmed': False,
        'submitter_id': message.from_user.id
    }
    data = load_data()
    data.setdefault('activities', []).append(new_activity)
    save_data(data)
    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_upcoming_events")
def back_to_upcoming_events(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
    """
    handle_upcoming_events(call)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_welcome")
def handle_back_to_welcome(call):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.
    """
    from handlers.main_handlers import send_welcome
    send_welcome(call.message)
